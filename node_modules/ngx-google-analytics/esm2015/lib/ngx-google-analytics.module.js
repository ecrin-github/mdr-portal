import { NgModule } from '@angular/core';
import { NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER } from './initializers/google-analytics.initializer';
import { NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN } from './tokens/ngx-google-analytics-settings-token';
import { GaEventDirective } from './directives/ga-event.directive';
import { GaEventCategoryDirective } from './directives/ga-event-category.directive';
import { GaEventFormInputDirective } from './directives/ga-event-form-input.directive';
/**
 * Install Google Analytics Tracking code on your environment and configure tracking ID.
 *
 * This module should be a dependency on the highest level module of the application, i.e. AppModule in most use cases.
 */
import * as ɵngcc0 from '@angular/core';
export class NgxGoogleAnalyticsModule {
    /**
     * You should provide a valid Google TrackingCode. This code will be provided to the entire application by
     * `NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN` token. You can inject this code in you components if you like by
     * use the following injection code `@Inject(NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN) gaConfig: IGoogleAnalyticsSettings`
     *
     * @param trackingCode The Google Tracking Code
     * @param initCommands When placed, it will run any GA Commands in sequence after setup GA environment.
     * @param uri When placed, it will change the default js URI to the provided one.
     * @param enableTracing When true, trace GA tracking errors on production mode.
     * @param nonce When placed, nonce will be added to script tag.
     */
    static forRoot(trackingCode, initCommands = [], uri, enableTracing, nonce) {
        return {
            ngModule: NgxGoogleAnalyticsModule,
            providers: [
                {
                    provide: NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,
                    useValue: {
                        trackingCode,
                        initCommands,
                        uri,
                        enableTracing,
                        nonce
                    }
                },
                NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER,
            ]
        };
    }
}
NgxGoogleAnalyticsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxGoogleAnalyticsModule });
NgxGoogleAnalyticsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxGoogleAnalyticsModule_Factory(t) { return new (t || NgxGoogleAnalyticsModule)(); }, imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxGoogleAnalyticsModule, { declarations: function () { return [GaEventDirective,
        GaEventCategoryDirective,
        GaEventFormInputDirective]; }, exports: function () { return [GaEventDirective,
        GaEventCategoryDirective,
        GaEventFormInputDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxGoogleAnalyticsModule, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [
                    GaEventDirective,
                    GaEventCategoryDirective,
                    GaEventFormInputDirective
                ],
                exports: [
                    GaEventDirective,
                    GaEventCategoryDirective,
                    GaEventFormInputDirective
                ]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdvb2dsZS1hbmFseXRpY3MubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZ29vZ2xlLWFuYWx5dGljcy9zcmMvbGliL25neC1nb29nbGUtYW5hbHl0aWNzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUU5RCxPQUFPLEVBQUUseUNBQXlDLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUN4RyxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUNuRyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNuRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNwRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUd2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBZUgsTUFBTSxPQUFPLHdCQUF3QjtBQUNyQyxJQUFFO0FBQ0Y7QUFDRTtBQUNFO0FBRUg7QUFBTztBQUNFO0FBQ0U7QUFDRTtBQUNFO0FBRUosT0FEUDtBQUNMLElBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFvQixFQUFFLGVBQTBDLEVBQUUsRUFBRSxHQUFZLEVBQUUsYUFBdUIsRUFBRSxLQUFjO0FBQUksUUFDMUksT0FBTztBQUNYLFlBQU0sUUFBUSxFQUFFLHdCQUF3QjtBQUN4QyxZQUFNLFNBQVMsRUFBRTtBQUNqQixnQkFBUTtBQUNSLG9CQUFVLE9BQU8sRUFBRSxtQ0FBbUM7QUFDdEQsb0JBQVUsUUFBUSxFQUFFO0FBQ3BCLHdCQUFZLFlBQVk7QUFDeEIsd0JBQVksWUFBWTtBQUN4Qix3QkFBWSxHQUFHO0FBQ2Ysd0JBQVksYUFBYTtBQUN6Qix3QkFBWSxLQUFLO0FBQ2pCLHFCQUF1QztBQUN2QyxpQkFBUztBQUNULGdCQUFRLHlDQUF5QztBQUNqRCxhQUFPO0FBQ1AsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0g7b0RBNUNDLFFBQVEsU0FBQyxrQkFDUjtDQUFPLEVBQUUsRUFDUixrQkFDRCxZQUFZLEVBQUUsc0JBQ1osZ0JBQWdCLHNCQUNoQix3QkFBd0Isc0JBQ3hCLHlCQUF5QjtLQUMxQixrQkFDRCxPQUFPLEVBQUUsc0JBQ1AsZ0JBQWdCLHNCQUNoQix3QkFBd0Isc0JBQ3hCLHlCQUF5QjtPQUMxQixjQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUdvb2dsZUFuYWx5dGljc0NvbW1hbmQgfSBmcm9tICcuL2ludGVyZmFjZXMvaS1nb29nbGUtYW5hbHl0aWNzLWNvbW1hbmQnO1xuaW1wb3J0IHsgTkdYX0dPT0dMRV9BTkFMWVRJQ1NfSU5JVElBTElaRVJfUFJPVklERVIgfSBmcm9tICcuL2luaXRpYWxpemVycy9nb29nbGUtYW5hbHl0aWNzLmluaXRpYWxpemVyJztcbmltcG9ydCB7IE5HWF9HT09HTEVfQU5BTFlUSUNTX1NFVFRJTkdTX1RPS0VOIH0gZnJvbSAnLi90b2tlbnMvbmd4LWdvb2dsZS1hbmFseXRpY3Mtc2V0dGluZ3MtdG9rZW4nO1xuaW1wb3J0IHsgR2FFdmVudERpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9nYS1ldmVudC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgR2FFdmVudENhdGVnb3J5RGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2dhLWV2ZW50LWNhdGVnb3J5LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBHYUV2ZW50Rm9ybUlucHV0RGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2dhLWV2ZW50LWZvcm0taW5wdXQuZGlyZWN0aXZlJztcbmltcG9ydCB7IElHb29nbGVBbmFseXRpY3NTZXR0aW5ncyB9IGZyb20gJy4vaW50ZXJmYWNlcy9pLWdvb2dsZS1hbmFseXRpY3Mtc2V0dGluZ3MnO1xuXG4vKipcbiAqIEluc3RhbGwgR29vZ2xlIEFuYWx5dGljcyBUcmFja2luZyBjb2RlIG9uIHlvdXIgZW52aXJvbm1lbnQgYW5kIGNvbmZpZ3VyZSB0cmFja2luZyBJRC5cbiAqXG4gKiBUaGlzIG1vZHVsZSBzaG91bGQgYmUgYSBkZXBlbmRlbmN5IG9uIHRoZSBoaWdoZXN0IGxldmVsIG1vZHVsZSBvZiB0aGUgYXBwbGljYXRpb24sIGkuZS4gQXBwTW9kdWxlIGluIG1vc3QgdXNlIGNhc2VzLlxuICovXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIEdhRXZlbnREaXJlY3RpdmUsXG4gICAgR2FFdmVudENhdGVnb3J5RGlyZWN0aXZlLFxuICAgIEdhRXZlbnRGb3JtSW5wdXREaXJlY3RpdmVcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIEdhRXZlbnREaXJlY3RpdmUsXG4gICAgR2FFdmVudENhdGVnb3J5RGlyZWN0aXZlLFxuICAgIEdhRXZlbnRGb3JtSW5wdXREaXJlY3RpdmVcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hHb29nbGVBbmFseXRpY3NNb2R1bGUge1xuICAvKipcbiAgICogWW91IHNob3VsZCBwcm92aWRlIGEgdmFsaWQgR29vZ2xlIFRyYWNraW5nQ29kZS4gVGhpcyBjb2RlIHdpbGwgYmUgcHJvdmlkZWQgdG8gdGhlIGVudGlyZSBhcHBsaWNhdGlvbiBieVxuICAgKiBgTkdYX0dPT0dMRV9BTkFMWVRJQ1NfU0VUVElOR1NfVE9LRU5gIHRva2VuLiBZb3UgY2FuIGluamVjdCB0aGlzIGNvZGUgaW4geW91IGNvbXBvbmVudHMgaWYgeW91IGxpa2UgYnlcbiAgICogdXNlIHRoZSBmb2xsb3dpbmcgaW5qZWN0aW9uIGNvZGUgYEBJbmplY3QoTkdYX0dPT0dMRV9BTkFMWVRJQ1NfU0VUVElOR1NfVE9LRU4pIGdhQ29uZmlnOiBJR29vZ2xlQW5hbHl0aWNzU2V0dGluZ3NgXG4gICAqXG4gICAqIEBwYXJhbSB0cmFja2luZ0NvZGUgVGhlIEdvb2dsZSBUcmFja2luZyBDb2RlXG4gICAqIEBwYXJhbSBpbml0Q29tbWFuZHMgV2hlbiBwbGFjZWQsIGl0IHdpbGwgcnVuIGFueSBHQSBDb21tYW5kcyBpbiBzZXF1ZW5jZSBhZnRlciBzZXR1cCBHQSBlbnZpcm9ubWVudC5cbiAgICogQHBhcmFtIHVyaSBXaGVuIHBsYWNlZCwgaXQgd2lsbCBjaGFuZ2UgdGhlIGRlZmF1bHQganMgVVJJIHRvIHRoZSBwcm92aWRlZCBvbmUuXG4gICAqIEBwYXJhbSBlbmFibGVUcmFjaW5nIFdoZW4gdHJ1ZSwgdHJhY2UgR0EgdHJhY2tpbmcgZXJyb3JzIG9uIHByb2R1Y3Rpb24gbW9kZS5cbiAgICogQHBhcmFtIG5vbmNlIFdoZW4gcGxhY2VkLCBub25jZSB3aWxsIGJlIGFkZGVkIHRvIHNjcmlwdCB0YWcuXG4gICAqL1xuICBzdGF0aWMgZm9yUm9vdCh0cmFja2luZ0NvZGU6IHN0cmluZywgaW5pdENvbW1hbmRzOiBJR29vZ2xlQW5hbHl0aWNzQ29tbWFuZFtdID0gW10sIHVyaT86IHN0cmluZywgZW5hYmxlVHJhY2luZz86IGJvb2xlYW4sIG5vbmNlPzogc3RyaW5nKTogTW9kdWxlV2l0aFByb3ZpZGVyczxOZ3hHb29nbGVBbmFseXRpY3NNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5neEdvb2dsZUFuYWx5dGljc01vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogTkdYX0dPT0dMRV9BTkFMWVRJQ1NfU0VUVElOR1NfVE9LRU4sXG4gICAgICAgICAgdXNlVmFsdWU6IHtcbiAgICAgICAgICAgIHRyYWNraW5nQ29kZSxcbiAgICAgICAgICAgIGluaXRDb21tYW5kcyxcbiAgICAgICAgICAgIHVyaSxcbiAgICAgICAgICAgIGVuYWJsZVRyYWNpbmcsXG4gICAgICAgICAgICBub25jZVxuICAgICAgICAgIH0gYXMgSUdvb2dsZUFuYWx5dGljc1NldHRpbmdzXG4gICAgICAgIH0sXG4gICAgICAgIE5HWF9HT09HTEVfQU5BTFlUSUNTX0lOSVRJQUxJWkVSX1BST1ZJREVSLFxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cbiJdfQ==