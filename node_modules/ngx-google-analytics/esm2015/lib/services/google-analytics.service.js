import { Injectable, Inject, isDevMode } from '@angular/core';
import { NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN } from '../tokens/ngx-google-analytics-settings-token';
import { DOCUMENT } from '@angular/common';
import { NGX_GTAG_FN } from '../tokens/ngx-gtag-token';
import * as i0 from "@angular/core";
import * as i1 from "../tokens/ngx-google-analytics-settings-token";
import * as i2 from "@angular/common";
import * as i3 from "../tokens/ngx-gtag-token";
import * as ɵngcc0 from '@angular/core';
export class GoogleAnalyticsService {
    constructor(settings, _document, _gtag) {
        this.settings = settings;
        this._document = _document;
        this._gtag = _gtag;
    }
    get document() {
        return this._document;
    }
    throw(err) {
        if ((this.settings.enableTracing || isDevMode()) && console && console.error) {
            console.error(err);
        }
    }
    /** @todo Change this to `Object.fromEntity()` in the future... */
    toKeyValue(map) {
        return (map.size > 0)
            ? Array.from(map).reduce((obj, [key, value]) => Object.defineProperty(obj, key, { value, enumerable: true }), {})
            : undefined;
    }
    /**
     * Call native GA Tag
     */
    gtag(...args) {
        try {
            this._gtag(...args.filter(x => x !== undefined));
        }
        catch (err) {
            this.throw(err);
        }
    }
    /**
     * Send an event trigger to GA. It is the same as call:
     * ```js
     * gtag('event', 'video_auto_play_start', {
     *   'event_label': 'My promotional video',
     *   'event_category': 'video_auto_play'
     * });
     * ```
     *
     * @param action 'video_auto_play_start'
     * @param category 'video_auto_play'
     * @param label 'My promotional video'
     * @param value An value to measure something
     */
    event(action, category, label, value, interaction) {
        try {
            const opt = new Map();
            if (category) {
                opt.set('event_category', category);
            }
            if (label) {
                opt.set('event_label', label);
            }
            if (value) {
                opt.set('value', value);
            }
            if (interaction !== undefined) {
                opt.set('interaction', interaction);
            }
            const params = this.toKeyValue(opt);
            if (params) {
                this.gtag('event', action, params);
            }
            else {
                this.gtag('event', action);
            }
        }
        catch (error) {
            this.throw(error);
        }
    }
    /**
     * Send an page view event. This is the same as
     *
     * ```js
     * gtag('config', 'GA_TRACKING_ID', {
     *   'page_title' : 'Homepage',
     *   'page_path': '/home'
     * });
     * ```
     *
     * The tracking ID is injected automatically by Inject Token NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN
     *
     * @param path /home
     * @param title Homepage
     * @param location '{ page_location }'
     * @param options '{ ... custom dimentions }'
     */
    pageView(path, title, location, options) {
        try {
            const opt = new Map([['page_path', path]]);
            if (title) {
                opt.set('page_title', title);
            }
            if (location || this.document) {
                opt.set('page_location', (location || this.document.location.href));
            }
            if (options) {
                Object
                    .entries(options)
                    .map(([key, value]) => opt.set(key, value));
            }
            this.gtag('config', this.settings.trackingCode, this.toKeyValue(opt));
        }
        catch (error) {
            this.throw(error);
        }
    }
    /**
     * Send an event to report a App Page View. It is the same as
     *
     * ```js
     * gtag('event', 'screen_view', {
     *   'app_name': 'myAppName',
     *   'screen_name' : 'Home'
     * });
     *
     * ```
     *
     * @param screen 'screen_name'
     * @param appName 'app_name'
     * @param appId 'app_id'
     * @param appVersion 'app_version'
     * @param installerId 'app_installer_id'
     */
    appView(screen, appName, appId, appVersion, installerId) {
        try {
            const opt = new Map([['screen_name', screen], ['app_name', appName]]);
            if (appId) {
                opt.set('app_id', appId);
            }
            if (appVersion) {
                opt.set('app_version', appVersion);
            }
            if (installerId) {
                opt.set('app_installer_id', installerId);
            }
            this.gtag('event', 'screen_view', this.toKeyValue(opt));
        }
        catch (error) {
            this.throw(error);
        }
    }
    /**
     * Defines persistent values on GoogleAnalytics
     *
     * @see https://developers.google.com/analytics/devguides/collection/gtagjs/setting-values
     *
     * ```js
     * gtag('set', {
     *   'currency': 'USD',
     *   'country': 'US'
     * });
     * ```
     */
    set(...options) {
        try {
            this._gtag('set', ...options);
        }
        catch (err) {
            this.throw(err);
        }
    }
    /**
     * Send an event to GA to report an application error. It is the same as
     *
     * ```js
     * gtag('event', 'exception', {
     *   'description': 'error_description',
     *   'fatal': false   // set to true if the error is fatal
     * });
     * ```
     *
     * @param description 'error_description'
     * @param fatal set to true if the error is fatal
     */
    exception(description, fatal) {
        try {
            const opt = new Map();
            if (description) {
                opt.set('description', description);
            }
            if (fatal) {
                opt.set('fatal', fatal);
            }
            const params = this.toKeyValue(opt);
            if (params) {
                this.gtag('event', 'exception', this.toKeyValue(opt));
            }
            else {
                this.gtag('event', 'exception');
            }
        }
        catch (error) {
            this.throw(error);
        }
    }
}
GoogleAnalyticsService.ɵfac = function GoogleAnalyticsService_Factory(t) { return new (t || GoogleAnalyticsService)(ɵngcc0.ɵɵinject(NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(NGX_GTAG_FN)); };
GoogleAnalyticsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function GoogleAnalyticsService_Factory() { return new GoogleAnalyticsService(i0.ɵɵinject(i1.NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN), i0.ɵɵinject(i2.DOCUMENT), i0.ɵɵinject(i3.NGX_GTAG_FN)); }, token: GoogleAnalyticsService, providedIn: "root" });
GoogleAnalyticsService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [NGX_GTAG_FN,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GoogleAnalyticsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [NGX_GTAG_FN]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,