import { Directive, ElementRef, Inject, Input, isDevMode, Optional } from '@angular/core';
import { GaEventCategoryDirective } from './ga-event-category.directive';
import { GoogleAnalyticsService } from '../services/google-analytics.service';
import { NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN } from '../tokens/ngx-google-analytics-settings-token';
import { fromEvent } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './ga-event-category.directive';
import * as ɵngcc2 from '../services/google-analytics.service';
export class GaEventDirective {
    constructor(gaCategoryDirective, gaService, settings, el) {
        this.gaCategoryDirective = gaCategoryDirective;
        this.gaService = gaService;
        this.settings = settings;
        this.el = el;
        this.gaBind = 'click';
    }
    set gaBind(gaBind) {
        if (this.bindSubscription) {
            this.bindSubscription.unsubscribe();
        }
        this._gaBind = gaBind;
        this.bindSubscription = fromEvent(this.el.nativeElement, gaBind).subscribe(() => this.trigger());
    }
    get gaBind() {
        return this._gaBind;
    }
    ngOnDestroy() {
        if (this.bindSubscription) {
            this.bindSubscription.unsubscribe();
        }
    }
    trigger() {
        try {
            // Observação: não é obrigatório especificar uma categoria, uma etiqueta ou um valor. Consulte Eventos padrão do Google Analytics abaixo.
            // if (!this.$gaCategoryDirective) {
            //   throw new Error('You must provide a gaCategory attribute w/ gaEvent Directive.');
            // }
            if (!this.gaAction && !this.gaEvent) {
                throw new Error('You must provide a gaAction attribute to identify this event.');
            }
            this.gaService
                .event(this.gaAction || this.gaEvent, (this.gaCategoryDirective) ? this.gaCategoryDirective.gaCategory : undefined, this.gaLabel || this.label, this.gaValue, this.gaInteraction);
        }
        catch (err) {
            this.throw(err);
        }
    }
    throw(err) {
        if ((isDevMode() || this.settings.enableTracing) && console && console.warn) {
            console.warn(err);
        }
    }
}
GaEventDirective.ɵfac = function GaEventDirective_Factory(t) { return new (t || GaEventDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GaEventCategoryDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.GoogleAnalyticsService), ɵngcc0.ɵɵdirectiveInject(NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
GaEventDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: GaEventDirective, selectors: [["", "gaEvent", ""]], inputs: { gaBind: "gaBind", gaAction: "gaAction", gaLabel: "gaLabel", label: "label", gaValue: "gaValue", gaInteraction: "gaInteraction", gaEvent: "gaEvent" }, exportAs: ["gaEvent"] });
GaEventDirective.ctorParameters = () => [
    { type: GaEventCategoryDirective, decorators: [{ type: Optional }] },
    { type: GoogleAnalyticsService },
    { type: undefined, decorators: [{ type: Inject, args: [NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,] }] },
    { type: ElementRef }
];
GaEventDirective.propDecorators = {
    gaAction: [{ type: Input }],
    gaLabel: [{ type: Input }],
    label: [{ type: Input }],
    gaValue: [{ type: Input }],
    gaInteraction: [{ type: Input }],
    gaEvent: [{ type: Input }],
    gaBind: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GaEventDirective, [{
        type: Directive,
        args: [{
                selector: `[gaEvent]`,
                exportAs: 'gaEvent'
            }]
    }], function () { return [{ type: ɵngcc1.GaEventCategoryDirective, decorators: [{
                type: Optional
            }] }, { type: ɵngcc2.GoogleAnalyticsService }, { type: undefined, decorators: [{
                type: Inject,
                args: [NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN]
            }] }, { type: ɵngcc0.ElementRef }]; }, { gaBind: [{
            type: Input
        }], gaAction: [{
            type: Input
        }], gaLabel: [{
            type: Input
        }], label: [{
            type: Input
        }], gaValue: [{
            type: Input
        }], gaInteraction: [{
            type: Input
        }], gaEvent: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2EtZXZlbnQuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZ29vZ2xlLWFuYWx5dGljcy9zcmMvbGliL2RpcmVjdGl2ZXMvZ2EtZXZlbnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFhLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuRyxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUN2RSxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUU1RSxPQUFPLEVBQUMsbUNBQW1DLEVBQUMsTUFBTSwrQ0FBK0MsQ0FBQztBQUVsRyxPQUFPLEVBQUMsU0FBUyxFQUFlLE1BQU0sTUFBTSxDQUFDOzs7O0FBTTdDLE1BQU0sT0FBTyxnQkFBZ0I7QUFBRyxJQUU5QixZQUNzQixtQkFBNkMsRUFDekQsU0FBaUMsRUFDWSxRQUFrQyxFQUN0RSxFQUFjO0FBQ2hDLFFBSnFCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBMEI7QUFBQyxRQUMxRCxjQUFTLEdBQVQsU0FBUyxDQUF3QjtBQUFDLFFBQ1csYUFBUSxHQUFSLFFBQVEsQ0FBMEI7QUFBQyxRQUN2RSxPQUFFLEdBQUYsRUFBRSxDQUFZO0FBQ25DLFFBQ0ksSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUM7QUFDMUIsSUFBRSxDQUFDO0FBQ0gsSUFZRSxJQUFhLE1BQU0sQ0FBRSxNQUFjO0FBQ3JDLFFBQUksSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7QUFDL0IsWUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDMUMsU0FBSztBQUNMLFFBQ0ksSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFDMUIsUUFBSSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNyRyxJQUFFLENBQUM7QUFDSCxJQUFFLElBQUksTUFBTTtBQUFLLFFBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQ3hCLElBQUUsQ0FBQztBQUNILElBQ0UsV0FBVztBQUNiLFFBQUksSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7QUFDL0IsWUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDMUMsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ1ksT0FBTztBQUNuQixRQUFJLElBQUk7QUFDUixZQUFNLHlJQUF5STtBQUMvSSxZQUFNLG9DQUFvQztBQUMxQyxZQUFNLHNGQUFzRjtBQUM1RixZQUFNLElBQUk7QUFDVixZQUNNLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtBQUMzQyxnQkFBUSxNQUFNLElBQUksS0FBSyxDQUFDLCtEQUErRCxDQUFDLENBQUM7QUFDekYsYUFBTztBQUNQLFlBQ00sSUFBSSxDQUFDLFNBQVM7QUFDcEIsaUJBQVcsS0FBSyxDQUNKLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLE9BQU8sRUFDN0IsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUM1RSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQzFCLElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLGFBQWEsQ0FDbkIsQ0FBQztBQUNaLFNBQUs7QUFBQyxRQUFBLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFlBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0QixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDWSxLQUFLLENBQUMsR0FBVTtBQUM1QixRQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO0FBQ2pGLFlBQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN4QixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0g7NENBekVDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsV0FBVyxrQkFDckIsUUFBUSxFQUFFLFNBQVMsY0FDcEI7c1NBQ0k7QUFBQztBQUEwQyxZQVh4Qyx3QkFBd0IsdUJBYzNCLFFBQVE7QUFBTyxZQWJaLHNCQUFzQjtBQUFJLDRDQWU3QixNQUFNLFNBQUMsbUNBQW1DO0FBQVMsWUFqQnJDLFVBQVU7QUFBRztBQUFHO0FBQW9DLHVCQXlCcEUsS0FBSztBQUFLLHNCQUNWLEtBQUs7QUFBSyxvQkFDVixLQUFLO0FBQUssc0JBQ1YsS0FBSztBQUFLLDRCQUNWLEtBQUs7QUFBSyxzQkFDVixLQUFLO0FBQUsscUJBSVYsS0FBSztBQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdCwgSW5wdXQsIGlzRGV2TW9kZSwgT25EZXN0cm95LCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0dhRXZlbnRDYXRlZ29yeURpcmVjdGl2ZX0gZnJvbSAnLi9nYS1ldmVudC1jYXRlZ29yeS5kaXJlY3RpdmUnO1xuaW1wb3J0IHtHb29nbGVBbmFseXRpY3NTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlcy9nb29nbGUtYW5hbHl0aWNzLnNlcnZpY2UnO1xuaW1wb3J0IHtHYUFjdGlvbkVudW19IGZyb20gJy4uL2VudW1zL2dhLWFjdGlvbi5lbnVtJztcbmltcG9ydCB7TkdYX0dPT0dMRV9BTkFMWVRJQ1NfU0VUVElOR1NfVE9LRU59IGZyb20gJy4uL3Rva2Vucy9uZ3gtZ29vZ2xlLWFuYWx5dGljcy1zZXR0aW5ncy10b2tlbic7XG5pbXBvcnQge0lHb29nbGVBbmFseXRpY3NTZXR0aW5nc30gZnJvbSAnLi4vaW50ZXJmYWNlcy9pLWdvb2dsZS1hbmFseXRpY3Mtc2V0dGluZ3MnO1xuaW1wb3J0IHtmcm9tRXZlbnQsIFN1YnNjcmlwdGlvbn0gZnJvbSAncnhqcyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogYFtnYUV2ZW50XWAsXG4gIGV4cG9ydEFzOiAnZ2FFdmVudCdcbn0pXG5leHBvcnQgY2xhc3MgR2FFdmVudERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBnYUNhdGVnb3J5RGlyZWN0aXZlOiBHYUV2ZW50Q2F0ZWdvcnlEaXJlY3RpdmUsXG4gICAgcHJpdmF0ZSBnYVNlcnZpY2U6IEdvb2dsZUFuYWx5dGljc1NlcnZpY2UsXG4gICAgQEluamVjdChOR1hfR09PR0xFX0FOQUxZVElDU19TRVRUSU5HU19UT0tFTikgcHJpdmF0ZSBzZXR0aW5nczogSUdvb2dsZUFuYWx5dGljc1NldHRpbmdzLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWZcbiAgKSB7XG4gICAgdGhpcy5nYUJpbmQgPSAnY2xpY2snO1xuICB9XG5cbiAgcHJpdmF0ZSBiaW5kU3Vic2NyaXB0aW9uPzogU3Vic2NyaXB0aW9uO1xuXG4gIEBJbnB1dCgpIGdhQWN0aW9uOiBHYUFjdGlvbkVudW0gfCBzdHJpbmc7XG4gIEBJbnB1dCgpIGdhTGFiZWw6IHN0cmluZztcbiAgQElucHV0KCkgbGFiZWw6IHN0cmluZztcbiAgQElucHV0KCkgZ2FWYWx1ZTogbnVtYmVyO1xuICBASW5wdXQoKSBnYUludGVyYWN0aW9uOiBib29sZWFuO1xuICBASW5wdXQoKSBnYUV2ZW50OiBHYUFjdGlvbkVudW0gfCBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBfZ2FCaW5kOiBzdHJpbmc7XG5cbiAgQElucHV0KCkgc2V0IGdhQmluZCAoZ2FCaW5kOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5iaW5kU3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLmJpbmRTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9nYUJpbmQgPSBnYUJpbmQ7XG4gICAgdGhpcy5iaW5kU3Vic2NyaXB0aW9uID0gZnJvbUV2ZW50KHRoaXMuZWwubmF0aXZlRWxlbWVudCwgZ2FCaW5kKS5zdWJzY3JpYmUoKCkgPT4gdGhpcy50cmlnZ2VyKCkpO1xuICB9XG4gIGdldCBnYUJpbmQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fZ2FCaW5kO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuYmluZFN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5iaW5kU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHRyaWdnZXIoKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIE9ic2VydmHDp8OjbzogbsOjbyDDqSBvYnJpZ2F0w7NyaW8gZXNwZWNpZmljYXIgdW1hIGNhdGVnb3JpYSwgdW1hIGV0aXF1ZXRhIG91IHVtIHZhbG9yLiBDb25zdWx0ZSBFdmVudG9zIHBhZHLDo28gZG8gR29vZ2xlIEFuYWx5dGljcyBhYmFpeG8uXG4gICAgICAvLyBpZiAoIXRoaXMuJGdhQ2F0ZWdvcnlEaXJlY3RpdmUpIHtcbiAgICAgIC8vICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbXVzdCBwcm92aWRlIGEgZ2FDYXRlZ29yeSBhdHRyaWJ1dGUgdy8gZ2FFdmVudCBEaXJlY3RpdmUuJyk7XG4gICAgICAvLyB9XG5cbiAgICAgIGlmICghdGhpcy5nYUFjdGlvbiAmJiAhdGhpcy5nYUV2ZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3QgcHJvdmlkZSBhIGdhQWN0aW9uIGF0dHJpYnV0ZSB0byBpZGVudGlmeSB0aGlzIGV2ZW50LicpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmdhU2VydmljZVxuICAgICAgICAgIC5ldmVudChcbiAgICAgICAgICAgIHRoaXMuZ2FBY3Rpb24gfHwgdGhpcy5nYUV2ZW50LFxuICAgICAgICAgICAgKHRoaXMuZ2FDYXRlZ29yeURpcmVjdGl2ZSkgPyB0aGlzLmdhQ2F0ZWdvcnlEaXJlY3RpdmUuZ2FDYXRlZ29yeSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRoaXMuZ2FMYWJlbCB8fCB0aGlzLmxhYmVsLFxuICAgICAgICAgICAgdGhpcy5nYVZhbHVlLFxuICAgICAgICAgICAgdGhpcy5nYUludGVyYWN0aW9uXG4gICAgICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRoaXMudGhyb3coZXJyKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgdGhyb3coZXJyOiBFcnJvcikge1xuICAgIGlmICgoaXNEZXZNb2RlKCkgfHwgdGhpcy5zZXR0aW5ncy5lbmFibGVUcmFjaW5nKSAmJiBjb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==