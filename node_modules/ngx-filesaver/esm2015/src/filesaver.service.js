import { Injectable } from '@angular/core';
import { saveAs } from 'file-saver';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class FileSaverService {
    get isFileSaverSupported() {
        try {
            return !!new Blob();
        }
        catch (e) {
            return false;
        }
    }
    genType(fileName) {
        if (!fileName || fileName.lastIndexOf('.') === -1) {
            return 'text/plain';
        }
        const type = fileName.substr(fileName.lastIndexOf('.') + 1);
        switch (type) {
            case 'txt':
                return 'text/plain';
            case 'xml':
            case 'html':
                return `text/${type}`;
            case 'json':
                return 'octet/stream';
            default:
                return `application/${type}`;
        }
    }
    save(blob, fileName, filtType, option) {
        if (!blob) {
            throw new Error('Data argument should be a blob instance');
        }
        const file = new Blob([blob], { type: filtType || blob.type || this.genType(fileName) });
        saveAs(file, decodeURI(fileName || 'download'), option);
    }
    saveText(txt, fileName, option) {
        const blob = new Blob([txt]);
        this.save(blob, fileName, null, option);
    }
}
FileSaverService.ɵfac = function FileSaverService_Factory(t) { return new (t || FileSaverService)(); };
FileSaverService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FileSaverService_Factory() { return new FileSaverService(); }, token: FileSaverService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileSaverService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXNhdmVyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9zcmMvZmlsZXNhdmVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFvQixNQUFNLFlBQVksQ0FBQztBQUN0RDs7QUFFQSxNQUFNLE9BQU8sZ0JBQWdCO0FBQzdCLElBQUUsSUFBSSxvQkFBb0I7QUFBSyxRQUMzQixJQUFJO0FBQ1IsWUFBTSxPQUFPLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO0FBQzFCLFNBQUs7QUFBQyxRQUFBLE9BQU8sQ0FBQyxFQUFFO0FBQ2hCLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ0UsT0FBTyxDQUFDLFFBQWlCO0FBQUksUUFDM0IsSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO0FBQ3ZELFlBQU0sT0FBTyxZQUFZLENBQUM7QUFDMUIsU0FBSztBQUNMLFFBQUksTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLFFBQUksUUFBUSxJQUFJLEVBQUU7QUFDbEIsWUFBTSxLQUFLLEtBQUs7QUFDaEIsZ0JBQVEsT0FBTyxZQUFZLENBQUM7QUFDNUIsWUFBTSxLQUFLLEtBQUssQ0FBQztBQUNqQixZQUFNLEtBQUssTUFBTTtBQUNqQixnQkFBUSxPQUFPLFFBQVEsSUFBSSxFQUFFLENBQUM7QUFDOUIsWUFBTSxLQUFLLE1BQU07QUFDakIsZ0JBQVEsT0FBTyxjQUFjLENBQUM7QUFDOUIsWUFBTTtBQUNOLGdCQUFRLE9BQU8sZUFBZSxJQUFJLEVBQUUsQ0FBQztBQUNyQyxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRSxJQUFJLENBQUMsSUFBVSxFQUFFLFFBQWlCLEVBQUUsUUFBaUIsRUFBRSxNQUF5QjtBQUFJLFFBQ2xGLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDZixZQUFNLE1BQU0sSUFBSSxLQUFLLENBQUMseUNBQXlDLENBQUMsQ0FBQztBQUNqRSxTQUFLO0FBQ0wsUUFDSSxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzdGLFFBQUksTUFBTSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsUUFBUSxJQUFJLFVBQVUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzVELElBQUUsQ0FBQztBQUNILElBQ0UsUUFBUSxDQUFDLEdBQVcsRUFBRSxRQUFpQixFQUFFLE1BQXlCO0FBQUksUUFDcEUsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLFFBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM1QyxJQUFFLENBQUM7QUFDSDt1R0FBQztBQUNEOzRDQTFDQyxVQUFVLFNBQUMsRUFBRTtBQUFVLEVBQUUsTUFBTSxFQUFFOzswQkFDN0I7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHNhdmVBcywgRmlsZVNhdmVyT3B0aW9ucyB9IGZyb20gJ2ZpbGUtc2F2ZXInO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIEZpbGVTYXZlclNlcnZpY2Uge1xuICBnZXQgaXNGaWxlU2F2ZXJTdXBwb3J0ZWQoKTogYm9vbGVhbiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAhIW5ldyBCbG9iKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGdlblR5cGUoZmlsZU5hbWU/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICghZmlsZU5hbWUgfHwgZmlsZU5hbWUubGFzdEluZGV4T2YoJy4nKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiAndGV4dC9wbGFpbic7XG4gICAgfVxuICAgIGNvbnN0IHR5cGUgPSBmaWxlTmFtZS5zdWJzdHIoZmlsZU5hbWUubGFzdEluZGV4T2YoJy4nKSArIDEpO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAndHh0JzpcbiAgICAgICAgcmV0dXJuICd0ZXh0L3BsYWluJztcbiAgICAgIGNhc2UgJ3htbCc6XG4gICAgICBjYXNlICdodG1sJzpcbiAgICAgICAgcmV0dXJuIGB0ZXh0LyR7dHlwZX1gO1xuICAgICAgY2FzZSAnanNvbic6XG4gICAgICAgIHJldHVybiAnb2N0ZXQvc3RyZWFtJztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBgYXBwbGljYXRpb24vJHt0eXBlfWA7XG4gICAgfVxuICB9XG5cbiAgc2F2ZShibG9iOiBCbG9iLCBmaWxlTmFtZT86IHN0cmluZywgZmlsdFR5cGU/OiBzdHJpbmcsIG9wdGlvbj86IEZpbGVTYXZlck9wdGlvbnMpOiB2b2lkIHtcbiAgICBpZiAoIWJsb2IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGF0YSBhcmd1bWVudCBzaG91bGQgYmUgYSBibG9iIGluc3RhbmNlJyk7XG4gICAgfVxuXG4gICAgY29uc3QgZmlsZSA9IG5ldyBCbG9iKFtibG9iXSwgeyB0eXBlOiBmaWx0VHlwZSB8fCBibG9iLnR5cGUgfHwgdGhpcy5nZW5UeXBlKGZpbGVOYW1lKSB9KTtcbiAgICBzYXZlQXMoZmlsZSwgZGVjb2RlVVJJKGZpbGVOYW1lIHx8ICdkb3dubG9hZCcpLCBvcHRpb24pO1xuICB9XG5cbiAgc2F2ZVRleHQodHh0OiBzdHJpbmcsIGZpbGVOYW1lPzogc3RyaW5nLCBvcHRpb24/OiBGaWxlU2F2ZXJPcHRpb25zKTogdm9pZCB7XG4gICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFt0eHRdKTtcbiAgICB0aGlzLnNhdmUoYmxvYiwgZmlsZU5hbWUsIG51bGwsIG9wdGlvbik7XG4gIH1cbn1cbiJdfQ==