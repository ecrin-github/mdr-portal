import { Directive, ElementRef, Input, HostListener, EventEmitter, Output } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FileSaverService } from './filesaver.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './filesaver.service';
import * as ɵngcc2 from '@angular/common/http';
export class FileSaverDirective {
    constructor(el, fss, httpClient) {
        this.el = el;
        this.fss = fss;
        this.httpClient = httpClient;
        this.method = 'GET';
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        if (!fss.isFileSaverSupported) {
            el.nativeElement.classList.add(`filesaver__not-support`);
        }
    }
    getName(res) {
        return decodeURI(this.fileName || res.headers.get('filename') || res.headers.get('x-filename'));
    }
    _click() {
        if (!this.fss.isFileSaverSupported) {
            return;
        }
        let req = this.http;
        if (!req) {
            let params = new HttpParams();
            const query = this.query || {};
            // tslint:disable-next-line:forin
            for (const item in query) {
                params = params.set(item, query[item]);
            }
            req = this.httpClient.request(this.method, this.url, {
                observe: 'response',
                responseType: 'blob',
                headers: this.header,
                params,
            });
        }
        this.setDisabled(true);
        req.subscribe((res) => {
            if (res.status !== 200 || res.body.size <= 0) {
                this.error.emit(res);
                return;
            }
            this.fss.save(res.body, this.getName(res), null, this.fsOptions);
            this.success.emit(res);
        }, (err) => this.error.emit(err), () => this.setDisabled(false));
    }
    setDisabled(status) {
        const el = this.el.nativeElement;
        el.disabled = status;
        el.classList[status ? 'add' : 'remove'](`filesaver__disabled`);
    }
}
FileSaverDirective.ɵfac = function FileSaverDirective_Factory(t) { return new (t || FileSaverDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FileSaverService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.HttpClient)); };
FileSaverDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FileSaverDirective, selectors: [["", "fileSaver", ""]], hostBindings: function FileSaverDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function FileSaverDirective_click_HostBindingHandler() { return ctx._click(); });
    } }, inputs: { method: "method", http: "http", query: "query", header: "header", url: "url", fileName: "fileName", fsOptions: "fsOptions" }, outputs: { success: "success", error: "error" }, exportAs: ["fileSaver"] });
FileSaverDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: FileSaverService },
    { type: HttpClient }
];
FileSaverDirective.propDecorators = {
    method: [{ type: Input }],
    http: [{ type: Input }],
    query: [{ type: Input }],
    header: [{ type: Input }],
    url: [{ type: Input }],
    fileName: [{ type: Input }],
    fsOptions: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    _click: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileSaverDirective, [{
        type: Directive,
        args: [{
                selector: '[fileSaver]',
                exportAs: 'fileSaver'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FileSaverService }, { type: ɵngcc2.HttpClient }]; }, { method: [{
            type: Input
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], _click: [{
            type: HostListener,
            args: ['click']
        }], http: [{
            type: Input
        }], query: [{
            type: Input
        }], header: [{
            type: Input
        }], url: [{
            type: Input
        }], fileName: [{
            type: Input
        }], fsOptions: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXNhdmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3NyYy9maWxlc2F2ZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRyxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxzQkFBc0IsQ0FBQztBQUM1RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRWxDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7O0FBTXZELE1BQU0sT0FBTyxrQkFBa0I7QUFDL0IsSUFVRSxZQUFvQixFQUFpQyxFQUFVLEdBQXFCLEVBQVUsVUFBc0I7QUFDdEgsUUFEc0IsT0FBRSxHQUFGLEVBQUUsQ0FBK0I7QUFBQyxRQUFTLFFBQUcsR0FBSCxHQUFHLENBQWtCO0FBQUMsUUFBUyxlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsUUFWNUcsV0FBTSxHQUFHLEtBQUssQ0FBQztBQUMxQixRQU1xQixZQUFPLEdBQUcsSUFBSSxZQUFZLEVBQXNCLENBQUM7QUFDdEUsUUFBcUIsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7QUFDckQsUUFFSSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFO0FBQ25DLFlBQU0sRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDL0QsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ1UsT0FBTyxDQUFDLEdBQXVCO0FBQUksUUFDekMsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxHQUFHLENBQUMsT0FB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QUFBSyx3QkFDVixLQUFLO0FBQUssc0JBQ1YsTUFBTTtBQUFLLG9CQUNYLE1BQU07QUFBSyxxQkFZWCxZQUFZLFNBQUMsT0FBTztBQUNuQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgSG9zdExpc3RlbmVyLCBFdmVudEVtaXR0ZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFBhcmFtcywgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRmlsZVNhdmVyT3B0aW9ucyB9IGZyb20gJ2ZpbGUtc2F2ZXInO1xuaW1wb3J0IHsgRmlsZVNhdmVyU2VydmljZSB9IGZyb20gJy4vZmlsZXNhdmVyLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZmlsZVNhdmVyXScsXG4gIGV4cG9ydEFzOiAnZmlsZVNhdmVyJyxcbn0pXG5leHBvcnQgY2xhc3MgRmlsZVNhdmVyRGlyZWN0aXZlIHtcbiAgQElucHV0KCkgbWV0aG9kID0gJ0dFVCc7XG4gIEBJbnB1dCgpIGh0dHA6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEJsb2I+PjtcbiAgQElucHV0KCkgcXVlcnk6IGFueTtcbiAgQElucHV0KCkgaGVhZGVyOiBhbnk7XG4gIEBJbnB1dCgpIHVybDogc3RyaW5nO1xuICBASW5wdXQoKSBmaWxlTmFtZTogc3RyaW5nO1xuICBASW5wdXQoKSBmc09wdGlvbnM6IEZpbGVTYXZlck9wdGlvbnM7XG4gIEBPdXRwdXQoKSByZWFkb25seSBzdWNjZXNzID0gbmV3IEV2ZW50RW1pdHRlcjxIdHRwUmVzcG9uc2U8QmxvYj4+KCk7XG4gIEBPdXRwdXQoKSByZWFkb25seSBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWY8SFRNTEJ1dHRvbkVsZW1lbnQ+LCBwcml2YXRlIGZzczogRmlsZVNhdmVyU2VydmljZSwgcHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7XG4gICAgaWYgKCFmc3MuaXNGaWxlU2F2ZXJTdXBwb3J0ZWQpIHtcbiAgICAgIGVsLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChgZmlsZXNhdmVyX19ub3Qtc3VwcG9ydGApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0TmFtZShyZXM6IEh0dHBSZXNwb25zZTxCbG9iPik6IHN0cmluZyB7XG4gICAgcmV0dXJuIGRlY29kZVVSSSh0aGlzLmZpbGVOYW1lIHx8IHJlcy5oZWFkZXJzLmdldCgnZmlsZW5hbWUnKSB8fCByZXMuaGVhZGVycy5nZXQoJ3gtZmlsZW5hbWUnKSk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIF9jbGljaygpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuZnNzLmlzRmlsZVNhdmVyU3VwcG9ydGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCByZXEgPSB0aGlzLmh0dHA7XG4gICAgaWYgKCFyZXEpIHtcbiAgICAgIGxldCBwYXJhbXMgPSBuZXcgSHR0cFBhcmFtcygpO1xuICAgICAgY29uc3QgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmZvcmluXG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gaW4gcXVlcnkpIHtcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zLnNldChpdGVtLCBxdWVyeVtpdGVtXSk7XG4gICAgICB9XG5cbiAgICAgIHJlcSA9IHRoaXMuaHR0cENsaWVudC5yZXF1ZXN0KHRoaXMubWV0aG9kLCB0aGlzLnVybCwge1xuICAgICAgICBvYnNlcnZlOiAncmVzcG9uc2UnLFxuICAgICAgICByZXNwb25zZVR5cGU6ICdibG9iJyxcbiAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXIsXG4gICAgICAgIHBhcmFtcyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuc2V0RGlzYWJsZWQodHJ1ZSk7XG4gICAgcmVxLnN1YnNjcmliZShcbiAgICAgIChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMgIT09IDIwMCB8fCByZXMuYm9keS5zaXplIDw9IDApIHtcbiAgICAgICAgICB0aGlzLmVycm9yLmVtaXQocmVzKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5mc3Muc2F2ZShyZXMuYm9keSwgdGhpcy5nZXROYW1lKHJlcyksIG51bGwsIHRoaXMuZnNPcHRpb25zKTtcbiAgICAgICAgdGhpcy5zdWNjZXNzLmVtaXQocmVzKTtcbiAgICAgIH0sXG4gICAgICAoZXJyKSA9PiB0aGlzLmVycm9yLmVtaXQoZXJyKSxcbiAgICAgICgpID0+IHRoaXMuc2V0RGlzYWJsZWQoZmFsc2UpLFxuICAgICk7XG4gIH1cblxuICBzZXREaXNhYmxlZChzdGF0dXM6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBjb25zdCBlbCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgICBlbC5kaXNhYmxlZCA9IHN0YXR1cztcbiAgICBlbC5jbGFzc0xpc3Rbc3RhdHVzID8gJ2FkZCcgOiAncmVtb3ZlJ10oYGZpbGVzYXZlcl9fZGlzYWJsZWRgKTtcbiAgfVxufVxuIl19