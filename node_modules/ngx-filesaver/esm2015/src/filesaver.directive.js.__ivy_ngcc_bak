import { Directive, ElementRef, Input, HostListener, EventEmitter, Output } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FileSaverService } from './filesaver.service';
export class FileSaverDirective {
    constructor(el, fss, httpClient) {
        this.el = el;
        this.fss = fss;
        this.httpClient = httpClient;
        this.method = 'GET';
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        if (!fss.isFileSaverSupported) {
            el.nativeElement.classList.add(`filesaver__not-support`);
        }
    }
    getName(res) {
        return decodeURI(this.fileName || res.headers.get('filename') || res.headers.get('x-filename'));
    }
    _click() {
        if (!this.fss.isFileSaverSupported) {
            return;
        }
        let req = this.http;
        if (!req) {
            let params = new HttpParams();
            const query = this.query || {};
            // tslint:disable-next-line:forin
            for (const item in query) {
                params = params.set(item, query[item]);
            }
            req = this.httpClient.request(this.method, this.url, {
                observe: 'response',
                responseType: 'blob',
                headers: this.header,
                params,
            });
        }
        this.setDisabled(true);
        req.subscribe((res) => {
            if (res.status !== 200 || res.body.size <= 0) {
                this.error.emit(res);
                return;
            }
            this.fss.save(res.body, this.getName(res), null, this.fsOptions);
            this.success.emit(res);
        }, (err) => this.error.emit(err), () => this.setDisabled(false));
    }
    setDisabled(status) {
        const el = this.el.nativeElement;
        el.disabled = status;
        el.classList[status ? 'add' : 'remove'](`filesaver__disabled`);
    }
}
FileSaverDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fileSaver]',
                exportAs: 'fileSaver',
            },] }
];
FileSaverDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: FileSaverService },
    { type: HttpClient }
];
FileSaverDirective.propDecorators = {
    method: [{ type: Input }],
    http: [{ type: Input }],
    query: [{ type: Input }],
    header: [{ type: Input }],
    url: [{ type: Input }],
    fileName: [{ type: Input }],
    fsOptions: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    _click: [{ type: HostListener, args: ['click',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXNhdmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9saWIvIiwic291cmNlcyI6WyJzcmMvZmlsZXNhdmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakcsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQWdCLE1BQU0sc0JBQXNCLENBQUM7QUFDNUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVsQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQU12RCxNQUFNLE9BQU8sa0JBQWtCO0lBVzdCLFlBQW9CLEVBQWlDLEVBQVUsR0FBcUIsRUFBVSxVQUFzQjtRQUFoRyxPQUFFLEdBQUYsRUFBRSxDQUErQjtRQUFVLFFBQUcsR0FBSCxHQUFHLENBQWtCO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQVYzRyxXQUFNLEdBQUcsS0FBSyxDQUFDO1FBT0wsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFzQixDQUFDO1FBQ2pELFVBQUssR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBR2pELElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUU7WUFDN0IsRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUM7U0FDMUQ7SUFDSCxDQUFDO0lBRU8sT0FBTyxDQUFDLEdBQXVCO1FBQ3JDLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUNsRyxDQUFDO0lBR0QsTUFBTTtRQUNKLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFO1lBQ2xDLE9BQU87U0FDUjtRQUNELElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNSLElBQUksTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7WUFDOUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7WUFDL0IsaUNBQWlDO1lBQ2pDLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO2dCQUN4QixNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDeEM7WUFFRCxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO2dCQUNuRCxPQUFPLEVBQUUsVUFBVTtnQkFDbkIsWUFBWSxFQUFFLE1BQU07Z0JBQ3BCLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTTtnQkFDcEIsTUFBTTthQUNQLENBQUMsQ0FBQztTQUNKO1FBRUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QixHQUFHLENBQUMsU0FBUyxDQUNYLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDTixJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRTtnQkFDNUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3JCLE9BQU87YUFDUjtZQUNELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ2pFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsRUFDRCxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQzdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQzlCLENBQUM7SUFDSixDQUFDO0lBRUQsV0FBVyxDQUFDLE1BQWU7UUFDekIsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7UUFDakMsRUFBRSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7UUFDckIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUNqRSxDQUFDOzs7WUFsRUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxhQUFhO2dCQUN2QixRQUFRLEVBQUUsV0FBVzthQUN0Qjs7O1lBVG1CLFVBQVU7WUFJckIsZ0JBQWdCO1lBSGhCLFVBQVU7OztxQkFVaEIsS0FBSzttQkFDTCxLQUFLO29CQUNMLEtBQUs7cUJBQ0wsS0FBSztrQkFDTCxLQUFLO3VCQUNMLEtBQUs7d0JBQ0wsS0FBSztzQkFDTCxNQUFNO29CQUNOLE1BQU07cUJBWU4sWUFBWSxTQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBIb3N0TGlzdGVuZXIsIEV2ZW50RW1pdHRlciwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwUGFyYW1zLCBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBGaWxlU2F2ZXJPcHRpb25zIH0gZnJvbSAnZmlsZS1zYXZlcic7XG5pbXBvcnQgeyBGaWxlU2F2ZXJTZXJ2aWNlIH0gZnJvbSAnLi9maWxlc2F2ZXIuc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tmaWxlU2F2ZXJdJyxcbiAgZXhwb3J0QXM6ICdmaWxlU2F2ZXInLFxufSlcbmV4cG9ydCBjbGFzcyBGaWxlU2F2ZXJEaXJlY3RpdmUge1xuICBASW5wdXQoKSBtZXRob2QgPSAnR0VUJztcbiAgQElucHV0KCkgaHR0cDogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8QmxvYj4+O1xuICBASW5wdXQoKSBxdWVyeTogYW55O1xuICBASW5wdXQoKSBoZWFkZXI6IGFueTtcbiAgQElucHV0KCkgdXJsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGZpbGVOYW1lOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGZzT3B0aW9uczogRmlsZVNhdmVyT3B0aW9ucztcbiAgQE91dHB1dCgpIHJlYWRvbmx5IHN1Y2Nlc3MgPSBuZXcgRXZlbnRFbWl0dGVyPEh0dHBSZXNwb25zZTxCbG9iPj4oKTtcbiAgQE91dHB1dCgpIHJlYWRvbmx5IGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZjxIVE1MQnV0dG9uRWxlbWVudD4sIHByaXZhdGUgZnNzOiBGaWxlU2F2ZXJTZXJ2aWNlLCBwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHtcbiAgICBpZiAoIWZzcy5pc0ZpbGVTYXZlclN1cHBvcnRlZCkge1xuICAgICAgZWwubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKGBmaWxlc2F2ZXJfX25vdC1zdXBwb3J0YCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXROYW1lKHJlczogSHR0cFJlc3BvbnNlPEJsb2I+KTogc3RyaW5nIHtcbiAgICByZXR1cm4gZGVjb2RlVVJJKHRoaXMuZmlsZU5hbWUgfHwgcmVzLmhlYWRlcnMuZ2V0KCdmaWxlbmFtZScpIHx8IHJlcy5oZWFkZXJzLmdldCgneC1maWxlbmFtZScpKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgX2NsaWNrKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5mc3MuaXNGaWxlU2F2ZXJTdXBwb3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHJlcSA9IHRoaXMuaHR0cDtcbiAgICBpZiAoIXJlcSkge1xuICAgICAgbGV0IHBhcmFtcyA9IG5ldyBIdHRwUGFyYW1zKCk7XG4gICAgICBjb25zdCBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Zm9yaW5cbiAgICAgIGZvciAoY29uc3QgaXRlbSBpbiBxdWVyeSkge1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMuc2V0KGl0ZW0sIHF1ZXJ5W2l0ZW1dKTtcbiAgICAgIH1cblxuICAgICAgcmVxID0gdGhpcy5odHRwQ2xpZW50LnJlcXVlc3QodGhpcy5tZXRob2QsIHRoaXMudXJsLCB7XG4gICAgICAgIG9ic2VydmU6ICdyZXNwb25zZScsXG4gICAgICAgIHJlc3BvbnNlVHlwZTogJ2Jsb2InLFxuICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcixcbiAgICAgICAgcGFyYW1zLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXREaXNhYmxlZCh0cnVlKTtcbiAgICByZXEuc3Vic2NyaWJlKFxuICAgICAgKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLnN0YXR1cyAhPT0gMjAwIHx8IHJlcy5ib2R5LnNpemUgPD0gMCkge1xuICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChyZXMpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZzcy5zYXZlKHJlcy5ib2R5LCB0aGlzLmdldE5hbWUocmVzKSwgbnVsbCwgdGhpcy5mc09wdGlvbnMpO1xuICAgICAgICB0aGlzLnN1Y2Nlc3MuZW1pdChyZXMpO1xuICAgICAgfSxcbiAgICAgIChlcnIpID0+IHRoaXMuZXJyb3IuZW1pdChlcnIpLFxuICAgICAgKCkgPT4gdGhpcy5zZXREaXNhYmxlZChmYWxzZSksXG4gICAgKTtcbiAgfVxuXG4gIHNldERpc2FibGVkKHN0YXR1czogYm9vbGVhbik6IHZvaWQge1xuICAgIGNvbnN0IGVsID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICAgIGVsLmRpc2FibGVkID0gc3RhdHVzO1xuICAgIGVsLmNsYXNzTGlzdFtzdGF0dXMgPyAnYWRkJyA6ICdyZW1vdmUnXShgZmlsZXNhdmVyX19kaXNhYmxlZGApO1xuICB9XG59XG4iXX0=